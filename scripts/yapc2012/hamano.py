#!/usr/bin/python
from ctypes import *

x86_64 = [0x53, 0xb8,0x02,0x00,0x00,0x00, 0x48,0x81,0xec,0xc8,0x9b,0x00,0x00,
0x48,0x83,0xff,0x01, 0xc7,0x44,0x24,0x88,0x02,0x00,0x00, 0x00,
0x0f,0x8e,0x89,0x00,0x00,0x00, 0xbb,0x02,0x00,0x00,0x00,
0x41,0xba,0x01,0x00,0x00,0x00, 0x41,0xb8,0x03,0x00,0x00,0x00,
0x41,0xbb,0x01,0x00,0x00,0x00, 0x66,0x2e,0x0f,0x1f,0x84,0x00,0x00,
0x00,0x00,0x00, 0x45,0x85,0xd2, 0x7e,0x57, 0x8b,0x4c,0x24,0x88,
0x89,0xc8, 0x0f,0xaf,0xc1, 0x41,0x39,0xc0, 0x7c,0x65, 0x44,0x89,0xc2,
0x44,0x89,0xc0, 0xc1,0xfa,0x1f, 0xf7,0xf9, 0x85,0xd2, 0x74,0x3a,
0x41,0x8d,0x42,0xff, 0x48,0x8d,0x74,0x24,0x8c,
0x4c,0x8d,0x4c,0x84,0x8c, 0xeb,0x25, 0x66,0x0f,0x1f,0x44,0x00,0x00,
0x8b,0x0e, 0x89,0xc8, 0x0f,0xaf,0xc1, 0x44,0x39,0xc0, 0x7f,0x34,
0x44,0x89,0xc2, 0x44,0x89,0xc0, 0x48,0x83,0xc6,0x04, 0xc1,0xfa,0x1f,
0xf7,0xf9, 0x85,0xd2, 0x74,0x05, 0x4c,0x39,0xce, 0x75,0xdc,
0x41,0x83,0xc0,0x02, 0x49,0x39,0xfb, 0x7c,0x9b, 0x48,0x63,0xc3,
0x48,0x81,0xc4,0xc8,0x9b,0x00,0x00, 0x5b, 0xc3,
0x0f,0x1f,0x80,0x00,0x00,0x00,0x00, 0x41,0x83,0xc2,0x01,
0x46,0x89,0x44,0x9c,0x88, 0x44,0x01,0xc3, 0x4d,0x63,0xda,
0x41,0x83,0xc0,0x02, 0x49,0x39,0xfb, 0x0f,0x8c,0x6c,0xff,0xff,0xff,
0xeb,0xcf, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90]

x86 = [0x55, 0x89,0xe5, 0x57, 0x56, 0x53, 0x81,0xec,0x44,0x9c,0x00,0x00,
0x83,0x7d,0x08,0x01, 0xc7,0x85,0xb0,0x63,0xff,0xff,0x02,
0x00,0x00,0x00, 0x0f,0x8e,0x95,0x00,0x00,0x00,
0xc7,0x85,0xb4,0x63,0xff,0xff,0x02, 0x00,0x00,0x00,
0x8b,0x8d,0xb4,0x63,0xff,0xff, 0xbe,0x03,0x00,0x00,0x00,
0xbf,0x01,0x00,0x00,0x00, 0x89,0xc8, 0x0f,0xaf,0xc1, 0x39,0xc6,
0x7c,0x5d, 0x90, 0x8d,0x74,0x26,0x00, 0x89,0xf2, 0x89,0xf0,
0xc1,0xfa,0x1f, 0x31,0xdb, 0xf7,0xf9, 0x85,0xd2, 0x75,0x26, 0xeb,0x2b,
0x8d,0xb4,0x26,0x00,0x00,0x00,0x00,
0x8b,0x8c,0x9d,0xb4,0x63,0xff,0xff, 0x89,0xc8, 0x0f,0xaf,0xc1,
0x39,0xf0, 0x7f,0x30, 0x89,0xf2, 0x89,0xf0, 0xc1,0xfa,0x1f, 0xf7,0xf9,
0x85,0xd2, 0x74,0x07, 0x83,0xc3,0x01, 0x39,0xfb, 0x7c,0xdc,
0x3b,0x7d,0x08, 0x7d,0x2c, 0x8b,0x8d,0xb4,0x63,0xff,0xff,
0x83,0xc6,0x02, 0x89,0xc8, 0x0f,0xaf,0xc1, 0x39,0xc6, 0x7d,0xad, 0x90,
0x8d,0x74,0x26,0x00, 0x89,0xb4,0xbd,0xb4,0x63,0xff,0xff,
0x83,0xc7,0x01, 0x01,0xb5,0xb0,0x63,0xff,0xff, 0x3b,0x7d,0x08,
0x7c,0xd4, 0x8b,0x85,0xb0,0x63,0xff,0xff,
0x81,0xc4,0x44,0x9c,0x00,0x00, 0x5b, 0x5e, 0x5f, 0x5d, 0xc3,
0x8d,0x76,0x00, 0x8d,0xbc,0x27,0x00,0x00,0x00,0x00]

if sizeof(c_long) == 8:
    code = create_string_buffer(''.join(map(chr, x86_64)))
else:
    code = create_string_buffer(''.join(map(chr, x86)))

ps=pythonapi.getpagesize()
pythonapi.mprotect(~(ps-1)&addressof(code), sizeof(code), 7)
print cast(code, CFUNCTYPE(c_long, c_long))(10000)
